// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dna.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dna.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RemyBuffers {

namespace {

const ::google::protobuf::Descriptor* WhiskerTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiskerTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Whisker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Whisker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dna_2eproto() {
  protobuf_AddDesc_dna_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dna.proto");
  GOOGLE_CHECK(file != NULL);
  WhiskerTree_descriptor_ = file->message_type(0);
  static const int WhiskerTree_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, leaf_),
  };
  WhiskerTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhiskerTree_descriptor_,
      WhiskerTree::default_instance_,
      WhiskerTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhiskerTree));
  MemoryRange_descriptor_ = file->message_type(1);
  static const int MemoryRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, upper_),
  };
  MemoryRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryRange_descriptor_,
      MemoryRange::default_instance_,
      MemoryRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryRange));
  Memory_descriptor_ = file->message_type(2);
  static const int Memory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rec_send_ewma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rec_rec_ewma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rtt_ratio_),
  };
  Memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Memory_descriptor_,
      Memory::default_instance_,
      Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Memory));
  Whisker_descriptor_ = file->message_type(3);
  static const int Whisker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, window_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, window_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, intersend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, domain_),
  };
  Whisker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Whisker_descriptor_,
      Whisker::default_instance_,
      Whisker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Whisker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dna_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhiskerTree_descriptor_, &WhiskerTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryRange_descriptor_, &MemoryRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Memory_descriptor_, &Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Whisker_descriptor_, &Whisker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dna_2eproto() {
  delete WhiskerTree::default_instance_;
  delete WhiskerTree_reflection_;
  delete MemoryRange::default_instance_;
  delete MemoryRange_reflection_;
  delete Memory::default_instance_;
  delete Memory_reflection_;
  delete Whisker::default_instance_;
  delete Whisker_reflection_;
}

void protobuf_AddDesc_dna_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdna.proto\022\013RemyBuffers\"\207\001\n\013WhiskerTree"
    "\022(\n\006domain\030\001 \001(\0132\030.RemyBuffers.MemoryRan"
    "ge\022*\n\010children\030\002 \003(\0132\030.RemyBuffers.Whisk"
    "erTree\022\"\n\004leaf\030\003 \001(\0132\024.RemyBuffers.Whisk"
    "er\"U\n\013MemoryRange\022\"\n\005lower\030\013 \001(\0132\023.RemyB"
    "uffers.Memory\022\"\n\005upper\030\014 \001(\0132\023.RemyBuffe"
    "rs.Memory\"H\n\006Memory\022\025\n\rrec_send_ewma\030\025 \001"
    "(\001\022\024\n\014rec_rec_ewma\030\026 \001(\001\022\021\n\trtt_ratio\030\027 "
    "\001(\001\"y\n\007Whisker\022\030\n\020window_increment\030\037 \001(\021"
    "\022\027\n\017window_multiple\030  \001(\001\022\021\n\tintersend\030!"
    " \001(\001\022(\n\006domain\030\" \001(\0132\030.RemyBuffers.Memor"
    "yRange", 446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dna.proto", &protobuf_RegisterTypes);
  WhiskerTree::default_instance_ = new WhiskerTree();
  MemoryRange::default_instance_ = new MemoryRange();
  Memory::default_instance_ = new Memory();
  Whisker::default_instance_ = new Whisker();
  WhiskerTree::default_instance_->InitAsDefaultInstance();
  MemoryRange::default_instance_->InitAsDefaultInstance();
  Memory::default_instance_->InitAsDefaultInstance();
  Whisker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dna_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dna_2eproto {
  StaticDescriptorInitializer_dna_2eproto() {
    protobuf_AddDesc_dna_2eproto();
  }
} static_descriptor_initializer_dna_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WhiskerTree::kDomainFieldNumber;
const int WhiskerTree::kChildrenFieldNumber;
const int WhiskerTree::kLeafFieldNumber;
#endif  // !_MSC_VER

WhiskerTree::WhiskerTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhiskerTree::InitAsDefaultInstance() {
  domain_ = const_cast< ::RemyBuffers::MemoryRange*>(&::RemyBuffers::MemoryRange::default_instance());
  leaf_ = const_cast< ::RemyBuffers::Whisker*>(&::RemyBuffers::Whisker::default_instance());
}

WhiskerTree::WhiskerTree(const WhiskerTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhiskerTree::SharedCtor() {
  _cached_size_ = 0;
  domain_ = NULL;
  leaf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiskerTree::~WhiskerTree() {
  SharedDtor();
}

void WhiskerTree::SharedDtor() {
  if (this != default_instance_) {
    delete domain_;
    delete leaf_;
  }
}

void WhiskerTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiskerTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiskerTree_descriptor_;
}

const WhiskerTree& WhiskerTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

WhiskerTree* WhiskerTree::default_instance_ = NULL;

WhiskerTree* WhiskerTree::New() const {
  return new WhiskerTree;
}

void WhiskerTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
    }
    if (has_leaf()) {
      if (leaf_ != NULL) leaf_->::RemyBuffers::Whisker::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhiskerTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.MemoryRange domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .RemyBuffers.WhiskerTree children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        if (input->ExpectTag(26)) goto parse_leaf;
        break;
      }

      // optional .RemyBuffers.Whisker leaf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhiskerTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.MemoryRange domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->domain(), output);
  }

  // repeated .RemyBuffers.WhiskerTree children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  // optional .RemyBuffers.Whisker leaf = 3;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhiskerTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.MemoryRange domain = 1;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->domain(), target);
  }

  // repeated .RemyBuffers.WhiskerTree children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children(i), target);
  }

  // optional .RemyBuffers.Whisker leaf = 3;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhiskerTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.MemoryRange domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domain());
    }

    // optional .RemyBuffers.Whisker leaf = 3;
    if (has_leaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaf());
    }

  }
  // repeated .RemyBuffers.WhiskerTree children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiskerTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhiskerTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhiskerTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhiskerTree::MergeFrom(const WhiskerTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      mutable_domain()->::RemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
    if (from.has_leaf()) {
      mutable_leaf()->::RemyBuffers::Whisker::MergeFrom(from.leaf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhiskerTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiskerTree::CopyFrom(const WhiskerTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiskerTree::IsInitialized() const {

  return true;
}

void WhiskerTree::Swap(WhiskerTree* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    children_.Swap(&other->children_);
    std::swap(leaf_, other->leaf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhiskerTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiskerTree_descriptor_;
  metadata.reflection = WhiskerTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryRange::kLowerFieldNumber;
const int MemoryRange::kUpperFieldNumber;
#endif  // !_MSC_VER

MemoryRange::MemoryRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemoryRange::InitAsDefaultInstance() {
  lower_ = const_cast< ::RemyBuffers::Memory*>(&::RemyBuffers::Memory::default_instance());
  upper_ = const_cast< ::RemyBuffers::Memory*>(&::RemyBuffers::Memory::default_instance());
}

MemoryRange::MemoryRange(const MemoryRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemoryRange::SharedCtor() {
  _cached_size_ = 0;
  lower_ = NULL;
  upper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryRange::~MemoryRange() {
  SharedDtor();
}

void MemoryRange::SharedDtor() {
  if (this != default_instance_) {
    delete lower_;
    delete upper_;
  }
}

void MemoryRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryRange_descriptor_;
}

const MemoryRange& MemoryRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

MemoryRange* MemoryRange::default_instance_ = NULL;

MemoryRange* MemoryRange::New() const {
  return new MemoryRange;
}

void MemoryRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lower()) {
      if (lower_ != NULL) lower_->::RemyBuffers::Memory::Clear();
    }
    if (has_upper()) {
      if (upper_ != NULL) upper_->::RemyBuffers::Memory::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.Memory lower = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_upper;
        break;
      }

      // optional .RemyBuffers.Memory upper = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemoryRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.Memory lower = 11;
  if (has_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lower(), output);
  }

  // optional .RemyBuffers.Memory upper = 12;
  if (has_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->upper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemoryRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.Memory lower = 11;
  if (has_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lower(), target);
  }

  // optional .RemyBuffers.Memory upper = 12;
  if (has_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->upper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemoryRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.Memory lower = 11;
    if (has_lower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lower());
    }

    // optional .RemyBuffers.Memory upper = 12;
    if (has_upper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryRange::MergeFrom(const MemoryRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lower()) {
      mutable_lower()->::RemyBuffers::Memory::MergeFrom(from.lower());
    }
    if (from.has_upper()) {
      mutable_upper()->::RemyBuffers::Memory::MergeFrom(from.upper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRange::CopyFrom(const MemoryRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRange::IsInitialized() const {

  return true;
}

void MemoryRange::Swap(MemoryRange* other) {
  if (other != this) {
    std::swap(lower_, other->lower_);
    std::swap(upper_, other->upper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryRange_descriptor_;
  metadata.reflection = MemoryRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Memory::kRecSendEwmaFieldNumber;
const int Memory::kRecRecEwmaFieldNumber;
const int Memory::kRttRatioFieldNumber;
#endif  // !_MSC_VER

Memory::Memory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Memory::InitAsDefaultInstance() {
}

Memory::Memory(const Memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Memory::SharedCtor() {
  _cached_size_ = 0;
  rec_send_ewma_ = 0;
  rec_rec_ewma_ = 0;
  rtt_ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Memory::~Memory() {
  SharedDtor();
}

void Memory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Memory_descriptor_;
}

const Memory& Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

Memory* Memory::default_instance_ = NULL;

Memory* Memory::New() const {
  return new Memory;
}

void Memory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rec_send_ewma_ = 0;
    rec_rec_ewma_ = 0;
    rtt_ratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double rec_send_ewma = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rec_send_ewma_)));
          set_has_rec_send_ewma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_rec_rec_ewma;
        break;
      }

      // optional double rec_rec_ewma = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rec_rec_ewma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rec_rec_ewma_)));
          set_has_rec_rec_ewma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_rtt_ratio;
        break;
      }

      // optional double rtt_ratio = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtt_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtt_ratio_)));
          set_has_rtt_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double rec_send_ewma = 21;
  if (has_rec_send_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->rec_send_ewma(), output);
  }

  // optional double rec_rec_ewma = 22;
  if (has_rec_rec_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->rec_rec_ewma(), output);
  }

  // optional double rtt_ratio = 23;
  if (has_rtt_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->rtt_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double rec_send_ewma = 21;
  if (has_rec_send_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->rec_send_ewma(), target);
  }

  // optional double rec_rec_ewma = 22;
  if (has_rec_rec_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->rec_rec_ewma(), target);
  }

  // optional double rtt_ratio = 23;
  if (has_rtt_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->rtt_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double rec_send_ewma = 21;
    if (has_rec_send_ewma()) {
      total_size += 2 + 8;
    }

    // optional double rec_rec_ewma = 22;
    if (has_rec_rec_ewma()) {
      total_size += 2 + 8;
    }

    // optional double rtt_ratio = 23;
    if (has_rtt_ratio()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Memory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rec_send_ewma()) {
      set_rec_send_ewma(from.rec_send_ewma());
    }
    if (from.has_rec_rec_ewma()) {
      set_rec_rec_ewma(from.rec_rec_ewma());
    }
    if (from.has_rtt_ratio()) {
      set_rtt_ratio(from.rtt_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {

  return true;
}

void Memory::Swap(Memory* other) {
  if (other != this) {
    std::swap(rec_send_ewma_, other->rec_send_ewma_);
    std::swap(rec_rec_ewma_, other->rec_rec_ewma_);
    std::swap(rtt_ratio_, other->rtt_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Memory_descriptor_;
  metadata.reflection = Memory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Whisker::kWindowIncrementFieldNumber;
const int Whisker::kWindowMultipleFieldNumber;
const int Whisker::kIntersendFieldNumber;
const int Whisker::kDomainFieldNumber;
#endif  // !_MSC_VER

Whisker::Whisker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Whisker::InitAsDefaultInstance() {
  domain_ = const_cast< ::RemyBuffers::MemoryRange*>(&::RemyBuffers::MemoryRange::default_instance());
}

Whisker::Whisker(const Whisker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Whisker::SharedCtor() {
  _cached_size_ = 0;
  window_increment_ = 0;
  window_multiple_ = 0;
  intersend_ = 0;
  domain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Whisker::~Whisker() {
  SharedDtor();
}

void Whisker::SharedDtor() {
  if (this != default_instance_) {
    delete domain_;
  }
}

void Whisker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Whisker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Whisker_descriptor_;
}

const Whisker& Whisker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

Whisker* Whisker::default_instance_ = NULL;

Whisker* Whisker::New() const {
  return new Whisker;
}

void Whisker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    window_increment_ = 0;
    window_multiple_ = 0;
    intersend_ = 0;
    if (has_domain()) {
      if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Whisker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 window_increment = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &window_increment_)));
          set_has_window_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_window_multiple;
        break;
      }

      // optional double window_multiple = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_window_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_multiple_)));
          set_has_window_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_intersend;
        break;
      }

      // optional double intersend = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_intersend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intersend_)));
          set_has_intersend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_domain;
        break;
      }

      // optional .RemyBuffers.MemoryRange domain = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Whisker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 window_increment = 31;
  if (has_window_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->window_increment(), output);
  }

  // optional double window_multiple = 32;
  if (has_window_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->window_multiple(), output);
  }

  // optional double intersend = 33;
  if (has_intersend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->intersend(), output);
  }

  // optional .RemyBuffers.MemoryRange domain = 34;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Whisker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 window_increment = 31;
  if (has_window_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->window_increment(), target);
  }

  // optional double window_multiple = 32;
  if (has_window_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->window_multiple(), target);
  }

  // optional double intersend = 33;
  if (has_intersend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->intersend(), target);
  }

  // optional .RemyBuffers.MemoryRange domain = 34;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Whisker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 window_increment = 31;
    if (has_window_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->window_increment());
    }

    // optional double window_multiple = 32;
    if (has_window_multiple()) {
      total_size += 2 + 8;
    }

    // optional double intersend = 33;
    if (has_intersend()) {
      total_size += 2 + 8;
    }

    // optional .RemyBuffers.MemoryRange domain = 34;
    if (has_domain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Whisker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Whisker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Whisker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Whisker::MergeFrom(const Whisker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_increment()) {
      set_window_increment(from.window_increment());
    }
    if (from.has_window_multiple()) {
      set_window_multiple(from.window_multiple());
    }
    if (from.has_intersend()) {
      set_intersend(from.intersend());
    }
    if (from.has_domain()) {
      mutable_domain()->::RemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Whisker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Whisker::CopyFrom(const Whisker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Whisker::IsInitialized() const {

  return true;
}

void Whisker::Swap(Whisker* other) {
  if (other != this) {
    std::swap(window_increment_, other->window_increment_);
    std::swap(window_multiple_, other->window_multiple_);
    std::swap(intersend_, other->intersend_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Whisker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Whisker_descriptor_;
  metadata.reflection = Whisker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemyBuffers

// @@protoc_insertion_point(global_scope)
