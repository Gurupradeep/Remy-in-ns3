/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2015, National Institute of Technology, Karnataka.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Authors:  Guru Pradeep Reddy <gurupradeept@gmail.com>,
 *           Vaibhavi Pai <paivaibhavi15@gmail.com>,
 *           Shiv Shankar <sshivshankar@icloud.com>
 */

#ifndef TCPRATIONAL_H
#define TCPRATIONAL_H

#include "ns3/tcp-congestion-ops.h"
#include "ns3/whiskertree.hh"


namespace ns3 {
	/**
	 * \ingroup congestionOps
	 *
	 * \brief An implementation of TCP Rational
	 *
	 * TCP Rational is an optimal congestion control algorithm that has been generated
	 * by the Remy CC algorithm.
	 *
	 * This algorithm tracks just three state variables, which it updates each time it
	 * receives a new acknowledgment:
	 *
	 *              An exponentially-weighted moving average (EWMA) of the interarrival time
	 *              between new acknowledgments received (ack_ewma).        (1)
	 *
	 *              An exponentially-weighted moving average of the time between TCP sender
	 *              timestamps reflected in those acknowledgments (send_ewma).      (2)
	 *
	 *              The ratio between the most recent RTT and the minimum RTT seen during the
	 *              current connection (rtt_ratio)  (3)
	 *
	 * An action performed by this algorithm has 3 components:
	 *
	 *              A multiple m ≥ 0 to the current congestion window (cwnd)               (1)
	 *              An increment b to the congestion window (b could be negative)          (2)
	 *              A lower bound r > 0 milliseconds on the time between successive sends  (3)
	 *
	 * TCP Rational does the following 3 dimensional mapping based on rules generated by the
	 * Remy CC algorithm:
	 *              <ack_ewma, send_ewma, rtt_ratio> → (m, b, r)
	 *
	 * More information: http://web.mit.edu/remy/
	 */

class TcpRational : public TcpNewReno
{
private :
	const WhiskerTree *_whiskers;
	Memory _memory;

public:
  /**
   * \brief Get the type ID.
   * \return the object TypeId
   */
  static TypeId GetTypeId (void);

  /**
   * Create an unbound tcp socket.
   */
  TcpRational (void);

  /**
   * \brief Copy constructor
   * \param sock the object to copy
   */
  TcpRational (const TcpRational& sock);
  virtual ~TcpRational (void);

  virtual std::string GetName () const;

	/**
   * \brief Compute RTTs needed to execute TCP Rational algorithm
   *
   * The function filters RTT samples from the last RTT to find
   * the current smallest propagation delay + queueing delay (minRtt).
   * We take the minimum to avoid the effects of delayed ACKs.
   *
   * The function also min-filters all RTT measurements seen to find the
   * propagation delay (baseRtt).
   *
   * \param tcb internal congestion state
   * \param segmentsAcked count of segments ACKed
   * \param rtt last RTT
   *
   */
	virtual void PktsAcked (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked,
                          const Time& rtt);
	/**
   * \brief Adjust cwnd following TCP Rational algorithm
   *
   * \param tcb internal congestion state
   * \param segmentsAcked count of segments ACKed
   */
  virtual void IncreaseWindow (Ptr<TcpSocketState> tcb, uint32_t segmentsAcked);
	/**
   * \brief Get slow start threshold following TCP Rational principle
   *
   * \param tcb internal congestion state
   * \param bytesInFlight bytes in flight
   *
   * \return the slow start threshold value
   */
  virtual uint32_t GetSsThresh (Ptr<const TcpSocketState> tcb,
                                uint32_t bytesInFlight);


  virtual Ptr<TcpCongestionOps> Fork ();

	/*helper function*/
  virtual void UpdateMemory(const RemyPacket packet);


private:
	double m_intersendTime;   //!< Time between two packets sent

protected :
	double m_lastsendTime;    //!< Time at which the last packet was sent reflected in ACK






};
}  // namespace ns3

#endif // TCPVEGAS_H
