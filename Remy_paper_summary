Input- Assumptions about network and desired output in terms of throughput/queueing delay.

Output- Control rules for the independent end points.

Can work for networks where information in known apriori, or if not known also(Cellular Networks).

Steps involved:

- Information about network to be specified- Upper, lower limits of bandwidth, non-queueing delays, queue sizes, degrees of multiplexing.

- Traffic model- kind of load on endpoints.

- Use these to design a congestion control algorithm.

* Pre-calculated, optimised algorithm is applied to real scenario.
* No further learning happens once algorithm is applied(No real-time adaptation).

Optimised algorithm implemented on sender's side/within already implemented congestion control module. Not applied to receiver's side.

Modelling the problem:

-For every pending packet, decision of whether it should be sent or not.
-For a given network model and objective, choosing criteria for evaluation and evaluating the best congestion control algorithm.

Solution:
- Instead of each endpoint trying to individually optimise and use a best-effort mechanism to achieve best individual throughput, run same algorithm on all endpoints so that eventually all endpoints converge to a similar way of deciding fate of every packet.
- Remy is used to generate the algorithm to be implemented at every end point.

Results:

- Proved better than TCP Cubic, Compound TCP, TCP Vegas.
- More specific the apriori information, better the performance; wrong information, performed worse.

Shortcomings:

- All users(Endpoints) may not have same preferences, so why implement same algorithm.
- Video conferencing might not need more throughput; Some packets may be more important than others.
